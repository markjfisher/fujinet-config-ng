FEATURES {
    STARTADDRESS: default = $3000;
}
SYMBOLS {
    __STACKSIZE__:       type = weak,   value = $0100;
    __STARTADDRESS__:    type = export, value = %S;
}
MEMORY {
    ZP:         file = "", define = yes, start = $0082, size = $007E;
    MAIN:       file = %O, define = yes, start = %S,    size = $BC20 - __STACKSIZE__ - %S;
    SIO:        file = %O, define = no,  start = $2000, size = $0100;
}
FILES {
    # this is only atari to put the HEADER bytes in, so that the BDD tests can load the resultant XEX file as it understands the format. It is effectively otherwise device agnostic
    %O: format = atari;
}
FORMATS {
    # as above
    atari: runad = _init;
}
SEGMENTS {
    ZEROPAGE: load = ZP,         type = zp;

    STARTUP:  load = MAIN,       type = ro,                optional = yes;
    DLIST:    load = MAIN,       type = ro,                optional = yes;
    CODE:     load = MAIN,       type = rw,  define = yes;
    RODATA:   load = MAIN,       type = ro                 optional = yes;
    DATA:     load = MAIN,       type = rw                 optional = yes;

    RESET:    load = MAIN,       type = rw,  define = yes, optional = yes;  # reset_handler in RAM as it has modifyable code
    LOW_DATA: load = MAIN,       type = rw,  define = yes, optional = yes;  # for storing values from init routine etc
    INIT:     load = MAIN,       type = ro,  define = yes, optional = yes;  
    INIT_NS:  load = MAIN,       type = rw,  define = yes, optional = yes;  
    SCREEN:   load = MAIN,       type = rw,  define = yes, optional = yes;
    BSS:      load = MAIN,       type = bss, define = yes, optional = yes;
    SIO:      load = SIO,        type = rw,  define = yes, optional = yes;

    # For malloc
    ONCE:     load = MAIN,       type = rw                 optional = yes;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
}