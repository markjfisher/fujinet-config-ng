marker $$testing page_cache_init$$

// page_cache structure layout:
// max_banks:       base + 0      (1 byte)
// entry_count:     base + 1      (1 byte)
// entries:         base + 2      (255 * 8 = 2040 bytes)
// bank_free_space: base + 2042   (64 * 2 = 128 bytes)

memory load atari "${BINARY_PATH}"
symbols load "${SYMBOLS_PATH}"

run init until CP = $_main

// Clear cache memory before first test
memory fill $_cache~$_cache+2170  $$clear cache before first test (total size = 2042 + 128)$$

// Test 1: Initialize with 1 bank
run $_main while CP != $t1
registers set cycle_count = 0
run $t1 while CP != $t1_end AND cycle_count < 100
assert $_cache = 0x01  $$t1: max_banks should be 1$$
assert $_cache + 1 = 0x00  $$t1: entry_count should be 0$$
assert $_cache + 2042 ~ 0x(00,40)  $$t1: first bank_free_space should be 0x4000$$

// Clear cache memory before second test
memory fill $_cache~$_cache+2170  $$clear cache before second test$$

// Test 2: Initialize with max banks (64)
run while CP != $t2
registers set cycle_count = 0
run while CP != $t2_end AND cycle_count < 1800
assert $_cache = 0x40  $$t2: max_banks should be 64$$
assert $_cache + 1 = 0x00  $$t2: entry_count should be 0$$
// Check first and last bank_free_space entries
assert $_cache + 2042 ~ 0x(00,40)  $$t2: first bank_free_space should be 0x4000$$
assert $_cache + 2168 ~ 0x(00,40)  $$t2: last bank_free_space should be 0x4000 (2042 + 126)$$

// Fill cache memory with 0xFF before third test
memory fill $_cache~$_cache+2170 0xFF  $$fill cache with 0xFF before third test$$

// Test 3: Initialize with 0 banks (invalid)
run while CP != $t3
registers set cycle_count = 0
run while CP != $t3_end AND cycle_count < 50
assert $_cache = 0x00  $$t3: max_banks is set to 00$$
assert $_cache + 1 = 0xFF  $$t3: entry_count should remain 0xFF$$
assert $_cache + 2042 ~ 0x(FF,FF)  $$t3: first bank_free_space should remain 0xFFFF$$ 