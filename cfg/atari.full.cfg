FEATURES {
    STARTADDRESS: default = $1800; # must be 1k boundary (000 400 800 c00) for DLIST 
}
SYMBOLS {
    __STACKSIZE__:       type = weak,   value = $0100;
    __STARTADDRESS__:    type = export, value = %S;
    __RESERVED_MEMORY__: type = weak,   value = $0000;
}
MEMORY {
    ZP:             file = "", define = yes, start = $0082,                     size = $007E;
    PMG:            file = "", define = yes, start = $0C00,                     size = $0400; # 1k boundary, first $180 reused
    FONT:           file = %O, define = no,  start = $1000,                     size = $0400;
    LOW:            file = %O, define = yes, start = $0C00,                     size = $0100; # unused PMG area we load low code into (reset etc) that must be outside banks. MUST LOAD BEFORE INIT!!
    INIT:           file = %O, define = no,  start = $3000,                     size = $0400; # 1 time init code that is overwritten after run (bank detect etc)
    # ; INIT block saved to disk here, see FORMATS section below
    INIT_NS:        file = "", define = no,  start = $3400,                     size = $0100; # temp area for INIT code to use that isn't saved to disk (NS = no save)
    LOW_DATA:       file = "", define = no,  start = __LOW_LAST__,              size = $0080; # unused PMG area we store data into from INIT code
    SCREEN:         file = "", define = no,  start = $1400,                     size = $0400; # unsaved, 3C0 to 400 is free if needed
    CORE:           file = %O, define = yes, start = __STARTADDRESS__,          size = $7000; # get it working first, then reduce size
    # ; BANK:           file = "", define = yes, start = $4000,                     size = $4000;
}
FILES {
    %O: format = atari;
}
FORMATS {
    atari: initad = INIT: pre_init,
           # ; multiple initad values can be specified here, just follow same convention, and comma separate them, e.g.
           # ; initad = CORE: main_init,
           runad = start;           # ; start is defined in crt0.s by cc65
}
SEGMENTS {
    ZEROPAGE: load = ZP,         type = zp;

    RESET:    load = LOW,        type = rw,  define = yes;

    INIT:     load = INIT,       type = rw,  define = yes;
    INIT_NS:  load = INIT_NS,    type = rw,  define = yes;
    LOW_DATA: load = LOW_DATA,   type = rw,  define = yes;
    SCREEN:   load = SCREEN,     type = rw,  define = yes;

    DLIST:    load = CORE,       type = rw,  define = yes;
    STARTUP:  load = CORE,       type = ro,  define = yes;
    LOWCODE:  load = CORE,       type = ro,  define = yes, optional = yes;
    ONCE:     load = CORE,       type = ro,                optional = yes;
    CODE:     load = CORE,       type = rw,  define = yes;
    DATA:     load = CORE,       type = rw,                optional = yes;
    RODATA:   load = CORE,       type = ro,                optional = yes;
    BUFFER:   load = CORE,       type = bss, define = yes, optional = yes; # ; by making this BSS it will not be saved to disk, but it means only bss can follow to the end of the file
    BSS:      load = CORE,       type = bss, define = yes, optional = yes;

    FONT:     load = FONT,       type = rw,  define = yes, optional = yes;
    # ; PMGS:     load = PMG,        type = rw,  define = yes, optional = yes;

}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
}
