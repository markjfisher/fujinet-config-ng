FEATURES {
    STARTADDRESS: default = $2C00;
}
SYMBOLS {
    __STACKSIZE__:       type = weak,   value = $80;  # malloc uses BSS! so this is only used by our everyday function passing
    __STARTADDRESS__:    type = export, value = %S;
    __RESERVED_MEMORY__: type = weak, value = $0000;
}
MEMORY {
    # Only define them if they are then used for __XXX_SIZE__ (or START, etc) variables later
    # These are written in the order defined when referencing %O, so PMG_LSAV which is written to by PRE needs to come before it
    ZP:         file = "", define = yes, start = $0082, size = $007E;
    PRE:        file = %O, define = no,  start = $2000, size = $0200; # init code that runs once and then overwritten (by SCREEN data etc)
    PRE_NOSAV:  file = "", define = no,  start = $2200, size = $0100; # work aread for PRE-INIT routines that will be overwritten and not saved to disk

    FONT:       file = "", define = no,  start = $2000, size = $0400; # Character set address, must be on 1k boundary (x000, x400, x800, xC00)
    SCREEN:     file = %O, define = no,  start = $2400, size = $0800; # should not cross 4k boundary ($1000)
    MAIN:       file = %O, define = yes, start = __STARTADDRESS__,    size = $BC20 - %S;
}
FILES {
    %O: format = atari;
}
FORMATS {
    atari: runad = start,
           initad = PRE: pre_init;
}
SEGMENTS {
    ZEROPAGE: load = ZP,         type = zp;
    INIT:     load = PRE,        type = ro,  define = yes;  # initialisation routines that will be overwritten
    INIT_NS:  load = PRE_NOSAV,  type = rw,  define = yes;  # used as temporary bss-like data area for init routines but will be reused

    RESET:    load = MAIN,       type = rw,  define = yes;  # reset_handler in RAM as it has modifyable code
    LOW_DATA: load = MAIN,       type = rw,  define = yes;  # for permanently storing values calculated during init routine etc
    LOWCODE:  load = MAIN,       type = ro,  define = yes, optional = yes;
    CODE:     load = MAIN,       type = rw,  define = yes;
    RODATA:   load = MAIN,       type = ro,  define = yes, optional = yes;
    ONCE:     load = MAIN,       type = ro,                optional = yes;
    DATA:     load = MAIN,       type = rw,                optional = yes;
    STARTUP:  load = MAIN,       type = ro,  define = yes;
    BSS:      load = MAIN,       type = bss, define = yes, optional = yes;

    # other segments
    SCREEN:   load = SCREEN,     type = rw,  define = yes, optional = yes;
    FONT:     load = FONT,       type = rw,  define = yes, optional = yes;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
}
