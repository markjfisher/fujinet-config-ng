SYMBOLS {
    __STACKSIZE__:       type = weak,   value = $0100;  # software stack should be pretty minimal, only few params being passed around, nothing recursive
    __STARTADDRESS__:    type = export, value = __MAIN_START__;
}
MEMORY {
    ZP:         file = "", define = yes, start = $0082, size = $007E;
    LOW:        file = %O, define = yes, start = $0600, size = $00A0; # writable memory for eg. self modifying code
    LOWD:       file = %O, define = yes, start = $06a0, size = $0060; # writable memory for storing data, and initial values for APP
    PRE:        file = %O, define = yes, start = $2C00, size = $0200; # init code that runs once and then overwritten (by PMG etc)
    PRE2:       file = "", define = yes, start = $2E00, size = $0800; # non stored-to-disk memory for PRE-INIT routines
    PMG:        file = "", define = yes, start = $2C00, size = $0400; # This seems HUGE. do we really need all this just for the cursor line?
    SCREEN:     file = %O, define = yes, start = __PMG_START__ + __PMG_SIZE__, size = $0600; # need $460 for screen mem, dlist < $100, should not cross 4k boundary??
    STACK:      file = "", define = yes, start = __SCREEN_START__ + __SCREEN_SIZE__, size = __STACKSIZE__;
    BSS_M:      file = "", define = yes, start = __STACK_START__ + __STACK_SIZE__, size = $4000 - __STACK_START__ - __STACK_SIZE__;
    BANK1:      file = "", define = yes, start = $4000, size = $4000;
    BANK2:      file = "", define = yes, start = $4000, size = $4000;
    BANK3:      file = "", define = yes, start = $4000, size = $4000;
    BANK4:      file = "", define = yes, start = $4000, size = $4000;
    MAIN:       file = %O, define = yes, start = $8000, size = $2000; # 8K should be enough for code. Doesn't work on Atari 400 like this.
}
FILES {
    %O: format = atari;
}
FORMATS {
    atari: runad = start,
           initad = PRE: pre_init;
}
SEGMENTS {
    ZEROPAGE: load = ZP,         type = zp;
    RESET:    load = LOW,        type = rw,  define = yes;  # reset_handler in RAM as it has modifyable code
    LOWDATA:  load = LOWD,       type = rw,  define = yes;  # for storing values from init routine etc
    PREINIT:  load = PRE,        type = ro,  define = yes;  
    PREINIT2: load = PRE2,       type = rw,  define = yes;  

    # MAIN used exclusively for CODE and RODATA
    CODE:     load = MAIN,       type = rw,  define = yes;
    RODATA:   load = MAIN,       type = ro,                optional = yes;

    BSS:      load = BSS_M,      type = bss, define = yes, optional = yes;

    # There isn't much actual ".data" in the application, keep it in LOWD
    DATA:     load = LOWD,       type = rw,                optional = yes;

    # other segments
    DLIST:    load = SCREEN,     type = ro,  define = yes, optional = yes;
    SDATA:    load = SCREEN,     type = rw,  define = yes, optional = yes;
    PBGBAR:   load = PMG,        type = rw,  define = yes, optional = yes;
}
