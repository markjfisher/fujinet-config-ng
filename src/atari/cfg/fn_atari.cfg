SYMBOLS {
    __STACKSIZE__:       type = weak,   value = $0800;  # 2k, as we are going to start using stack over bss for allocating memory to variables by using malloc instead
    __STARTADDRESS__:    type = export, value = __MAIN_START__;
}
MEMORY {
    # Only define them if they are then used for __XXX_SIZE__ (or START, etc) variables later
    ZP:         file = "", define = yes, start = $0082, size = $007E;
    PRE:        file = %O, define = no,  start = $3000, size = $0200; # init code that runs once and then overwritten (by PMG etc)
    PRE_NOSAV:  file = "", define = no,  start = $3200, size = $0100; # work aread for PRE-INIT routines that will be overwritten and not saved to disk

    FONT:       file = "", define = no,  start = $3000, size = $0400; # Character set address, must be on 1k boundary (x000, x400, x800, xC00)
    PMG:        file = "", define = yes, start = $3400, size = $0400; # Some of this is recouped below - 1k bounday
    PMG_LSAV:   file = %O, define = yes, start = $3400, size = $0040; # small area written to disk that is for routines we want in memory. this aread of PMG is below screen PMG usage
    PMG_LDATA:  file = "", define = yes, start = $3480, size = $015C; # PMG+0 to PMG+$019C is not used for gfx, so this area is good for storing variables and other code
    SCREEN:     file = %O, define = no,  start = $3800, size = $0600; # need $460 for screen mem, dlist < $100, should not cross 4k boundary ($1000)
    DATAH:      file = "", define = no,  start = $3E00, size = $0200; # extra buffers area, path/filter + hostslots
    BANK1:      file = "", define = no,  start = $4000, size = $4000;
    MAIN:       file = %O, define = yes, start = $8000, size = $2000; # 8K should be enough for code. Doesn't work on Atari 400 like this.
    BSSM:       file = "", define = yes, start = $A000, size = $0200; # shrink as much as possible, fn_io_buffer in here which is $100, rest are small vars
    STACK:      file = "", define = yes, start = $A200, size = __STACKSIZE__;
}
FILES {
    %O: format = atari;
}
FORMATS {
    atari: runad = start,
           initad = PRE: pre_init;
}
SEGMENTS {
    ZEROPAGE: load = ZP,         type = zp;
    RESET:    load = PMG_LSAV,   type = rw,  define = yes;  # reset_handler in RAM as it has modifyable code
    LOW_DATA: load = PMG_LDATA,  type = rw,  define = yes;  # for permanently storing values calculated during init routine etc
    INIT:     load = PRE,        type = ro,  define = yes;  # initialisation routines that will be overwritten
    INIT_NS:  load = PRE_NOSAV,  type = rw,  define = yes;  # used as temporary bss-like data area for init routines but will be reused

    # MAIN used exclusively for CODE, ONCE, and RODATA, this is so I can eventually rework this into ROM
    CODE:     load = MAIN,       type = rw,  define = yes;
    RODATA:   load = MAIN,       type = ro,                optional = yes;
    ONCE:     load = MAIN,       type = ro,                optional = yes;

    BSS:      load = BSSM,       type = bss, define = yes, optional = yes;

    # There isn't much actual initialised ".data" in the application, keep it in FREE_PMG
    DATA:     load = PMG_LSAV,   type = rw,                optional = yes;

    # $200 storage area for some more permanent buffers
    DATAH:    load = DATAH,      type = rw,                optional = yes;

    # other segments
    DLIST:    load = SCREEN,     type = ro,  define = yes, optional = yes;
    SCREEN:   load = SCREEN,     type = rw,  define = yes, optional = yes;
    PMGS:     load = PMG,        type = rw,  define = yes, optional = yes;
    FONT:     load = FONT,       type = rw,  define = yes, optional = yes;
}
