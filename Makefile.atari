# config makefile
#
# Requires some unixy setup:
#  - tr for lowercasing

TARGET := atari
CONFIG_NAME := cf

# specify additional subtarget, e.g. "FULL", or "LITE" for different memory config. Default is FULL
SUBTARGET := FULL

ST_LOWER := $(shell echo $(SUBTARGET) | tr 'A-Z' 'a-z')
PROGRAM_FULL := $(CONFIG_NAME)_$(ST_LOWER)

# Not even sure this is a thing, but could put -DFOO -DBAR -DBAZ=1 here
PREPROC_FLAGS =
CFLAGS = -Os $(PREPROC_FLAGS)

ASFLAGS_COMMON = --asm-include-dir src/common/inc --asm-include-dir src/libs/inc
ASFLAGS_FULL = $(ASFLAGS_COMMON) --asm-include-dir src/$(TARGET)/common/inc --asm-include-dir src/$(TARGET)/full/inc $(PREPROC_FLAGS)

ASFLAGS = $(ASFLAGS_$(SUBTARGET))

BUILD_DIR = build
LDFLAGS = --mapfile $(BUILD_DIR)/config.map

SRCDIR := src
OBJDIR := obj

ifdef CC65_HOME
  CC = $(CC65_HOME)/bin/cl65
else
  CC := cl65
endif

ifeq '$(findstring ;,$(PATH))' ';'
    detected_OS := Windows
else
    detected_OS := $(shell uname 2>/dev/null || echo Unknown)
    detected_OS := $(patsubst CYGWIN%,Cygwin,$(detected_OS))
    detected_OS := $(patsubst MSYS%,MSYS,$(detected_OS))
    detected_OS := $(patsubst MINGW%,MSYS,$(detected_OS))
endif

XS := ""
ifeq ($(detected_OS),$(filter $(detected_OS),MSYS MINGW))
# need an eXtra Slash for altirra things
	XS := /
endif

ALTIRRA ?= $(ALTIRRA_HOME)/Altirra64.exe \
  $(XS)/portable $(XS)/portablealt:altirra-debug.ini \
  $(XS)/debug \
  $(XS)/debugcmd: ".loadsym build\config.lst" \
  $(XS)/debugcmd: "bp debug"

#  $(XS)/debugcmd: "bp start"

EMUCMD := $(ALTIRRA)

ifeq ($(shell echo),)
  MKDIR = mkdir -p $1
  RMDIR = rmdir $1
  RMFILES = $(RM) $1
else
  MKDIR = mkdir $(subst /,\,$1)
  RMDIR = rmdir $(subst /,\,$1)
  RMFILES = $(if $1,del /f $(subst /,\,$1))
endif
COMMA := ,
SPACE := $(N/A) $(N/A)
define NEWLINE


endef
# Note: Do not remove any of the two empty lines above !

override PROGRAM_FULL := $(PROGRAM_FULL).com

rwildcard=$(wildcard $1$2)$(foreach d,$(wildcard $1*),$(call rwildcard,$d/,$2))

# root 'src' dir, mainly config.s
SOURCES := $(wildcard $(SRCDIR)/*.s)
SOURCES += $(wildcard $(SRCDIR)/*.c)

# add subdirs of $TARGET "common" src that apply to ALL target builds
SOURCES += $(call rwildcard,$(SRCDIR)/$(TARGET)/common/,*.s)
SOURCES += $(call rwildcard,$(SRCDIR)/$(TARGET)/common/,*.c)
SOURCES += $(call rwildcard,$(SRCDIR)/common/,*.s)
SOURCES += $(call rwildcard,$(SRCDIR)/common/,*.c)
# remove trailing and leading spaces.
SOURCES := $(strip $(SOURCES))

# Define specific source paths for the various target builds, e.g. SOURCES_FULL, SOURCES_LITE, SOURCES_ROM, ...
SOURCES_FULL := $(call rwildcard,$(SRCDIR)/$(TARGET)/full/,*.s)
SOURCES_FULL += $(call rwildcard,$(SRCDIR)/$(TARGET)/full/,*.c)
SOURCES_FULL := $(strip $(SOURCES_FULL))

# Define the LIBS sources
SRC_LIBS_FN_IO := $(call rwildcard,$(SRCDIR)/libs/fn_io/,*.s)
SRC_LIBS_FN_IO += $(call rwildcard,$(SRCDIR)/libs/fn_io/,*.c)
SRC_LIBS_FN_IO := $(strip $(SRC_LIBS_FN_IO))

# Create OBJECTS outputs
OBJ1 := $(SOURCES:.c=.o)
OBJECTS := $(OBJ1:.s=.o)
OBJECTS := $(OBJECTS:$(SRCDIR)/%=$(OBJDIR)/%)

OBJ2 := $(SOURCES_FULL:.c=.o)
OBJECTS_FULL := $(OBJ2:.s=.o)
OBJECTS_FULL := $(OBJECTS_FULL:$(SRCDIR)/%=$(OBJDIR)/%)

OBJ3 := $(SRC_LIBS_FN_IO:.c=.o)
OBJECTS_LIBS_FN_IO := $(OBJ3:.s=.o)
OBJECTS_LIBS_FN_IO := $(OBJECTS_LIBS_FN_IO:$(SRCDIR)/%=$(OBJDIR)/%)

LD_CONFIG_FULL := cfg/fn_$(TARGET)_$(ST_LOWER).cfg

.SUFFIXES:
.PHONY: all test clean fn_io.lib

all: $(PROGRAM_FULL) fn_io.lib

$(OBJDIR):
	$(call MKDIR,$@)

$(BUILD_DIR):
	$(call MKDIR,$@)

# How do we stop name clashes in file names? the specific directory required to compile the file will sort that out
SRC_INC_DIRS = $(sort $(dir $(wildcard $(SRCDIR)/$(TARGET)/common/*))) $(sort $(dir $(wildcard $(SRCDIR)/$(TARGET)/full/*))) $(sort $(dir $(wildcard $(SRCDIR)/common/*))) $(sort $(dir $(wildcard $(SRCDIR)/libs/*)))

# debug:
# $(info $$SOURCES = ${SOURCES})
# $(info $$OBJECTS = ${OBJECTS})
# $(info $$OBJECTS_FULL = ${OBJECTS_FULL})
# $(info $$OBJECTS_LIBS_FN_IO = ${OBJECTS_LIBS_FN_IO})
# $(info $$LD_CONFIG_FULL = ${LD_CONFIG_FULL})
# $(info $$SRC_INC_DIRS = ${SRC_INC_DIRS})

vpath %.c $(SRC_INC_DIRS) $(SRCDIR)

$(OBJDIR)/%.o: %.c | $(OBJDIR)
	@$(call MKDIR,$(dir $@))
	$(CC) -t $(TARGET) -c --create-dep $(@:.o=.d) $(CFLAGS) -o $@ $<

vpath %.s $(SRC_INC_DIRS) $(SRCDIR)

$(OBJDIR)/%.o: %.s | $(OBJDIR)
	@$(call MKDIR,$(dir $@))
	$(CC) -t $(TARGET) -c --create-dep $(@:.o=.d) -l $(@:.o=.lst) --add-source $(ASFLAGS) -o $@ $<

$(OBJDIR)/fn_io.lib: $(OBJECTS_LIBS_FN_IO) | $(OBJDIR)
	ar65 a $@ $(OBJECTS_LIBS_FN_IO)

fn_io.lib: $(OBJDIR)/fn_io.lib

$(PROGRAM_FULL): $(LD_CONFIG_FULL) $(OBJECTS) $(OBJECTS_FULL) $(OBJDIR)/fn_io.lib | $(BUILD_DIR)
	echo "Creating $@"
	$(CC) -t $(TARGET) $(LDFLAGS_FULL) -Ln $(BUILD_DIR)/$(@:.com=.lbl) -l $(BUILD_DIR)/$(@:.com=.lst) -o $(BUILD_DIR)/$@ $(patsubst %.cfg,-C %.cfg,$^)

test: $(PROGRAM_$(SUBTARGET))
	$(PREEMUCMD)
	$(EMUCMD) $(BUILD_DIR)\\$<
	$(POSTEMUCMD)

# TODO: add the ../fujinet-config-tools/atari/dist/*.com files here? Don't like linking the projects that way
dist: $(PROGRAM_$(SUBTARGET))
	mkdir -p dist
	rm -f autorun.atr
	cp build/$(PROGRAM_$(SUBTARGET)) dist/
	dir2atr -m -S -B picoboot.bin autorun.atr dist/

clean:
	$(call RMFILES,-r $(BUILD_DIR)/*)
	$(call RMFILES,-r $(OBJDIR)/*)
	$(call RMFILES,-r dist/*)
