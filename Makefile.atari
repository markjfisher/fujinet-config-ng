# config makefile
#

TARGET := atari
# specify additional subtarget, e.g. "400" for different memory config
SUBTARGET :=

PROGRAM := config
LIBS :=
PREPROC_FLAGS = -DBUILD_ATARI
CFLAGS = -Os $(PREPROC_FLAGS)
ASFLAGS = --asm-include-dir src/common/inc --asm-include-dir src/$(TARGET)/inc $(PREPROC_FLAGS)
BUILD_DIR = build
LDFLAGS = --mapfile $(BUILD_DIR)/config.map

SRCDIR := src
OBJDIR := obj

TARGETOBJDIR := $(OBJDIR)/$(TARGET)

ifdef CC65_HOME
  CC = $(CC65_HOME)/bin/cl65
else
  CC := cl65
endif

ifeq '$(findstring ;,$(PATH))' ';'
    detected_OS := Windows
else
    detected_OS := $(shell uname 2>/dev/null || echo Unknown)
    detected_OS := $(patsubst CYGWIN%,Cygwin,$(detected_OS))
    detected_OS := $(patsubst MSYS%,MSYS,$(detected_OS))
    detected_OS := $(patsubst MINGW%,MSYS,$(detected_OS))
endif

XS := ""
ifeq ($(detected_OS),$(filter $(detected_OS),MSYS MINGW))
# need an eXtra Slash for altirra things
	XS := /
endif

ALTIRRA ?= $(ALTIRRA_HOME)/Altirra64.exe \
  $(XS)/portable $(XS)/portablealt:altirra-debug.ini \
  $(XS)/debug \
  $(XS)/debugcmd: ".loadsym build\config.lst" \
  $(XS)/debugcmd: "bp debug"

#  $(XS)/debugcmd: "bp start"

EMUCMD := $(ALTIRRA)

ifeq ($(shell echo),)
  MKDIR = mkdir -p $1
  RMDIR = rmdir $1
  RMFILES = $(RM) $1
else
  MKDIR = mkdir $(subst /,\,$1)
  RMDIR = rmdir $(subst /,\,$1)
  RMFILES = $(if $1,del /f $(subst /,\,$1))
endif
COMMA := ,
SPACE := $(N/A) $(N/A)
define NEWLINE


endef
# Note: Do not remove any of the two empty lines above !

override PROGRAM := $(PROGRAM).com

rwildcard=$(wildcard $1$2)$(foreach d,$(wildcard $1*),$(call rwildcard,$d/,$2))

# root 'src' dir, mainly config.s
SOURCES := $(wildcard $(SRCDIR)/*.s)
SOURCES += $(wildcard $(SRCDIR)/*.c)
# add subdirs of $TARGET and "common"
SOURCES += $(call rwildcard,$(SRCDIR)/$(TARGET)/,*.s)
SOURCES += $(call rwildcard,$(SRCDIR)/$(TARGET)/,*.c)
SOURCES += $(call rwildcard,$(SRCDIR)/common/,*.s)
SOURCES += $(call rwildcard,$(SRCDIR)/common/,*.c)
# remove trailing and leading spaces.
SOURCES := $(strip $(SOURCES))

OBJ1 := $(SOURCES:.c=.o)
OBJECTS := $(OBJ1:.s=.o)
OBJECTS := $(OBJECTS:$(SRCDIR)/%=$(OBJDIR)/%)

DEPENDS := $(OBJECTS:.o=.d)
LIBS += $(call rwildcard,$(SRCDIR)/$(TARGET)/,*.lib)
LIBS += $(call rwildcard,$(SRCDIR)/common/,*.lib)

SUBTARGET_CONFIG :=
ifneq ($(SUBTARGET),)
SUBTARGET_CONFIG := _$(SUBTARGET)
endif

# look for (e.g) src/atari/cfg/fn_atari_400.cfg
LD_CONFIG := $(SRCDIR)/$(TARGET)/cfg/fn_$(TARGET)$(SUBTARGET_CONFIG).cfg

.SUFFIXES:
.PHONY: all test clean zap

all: $(PROGRAM)

$(OBJDIR):
	$(call MKDIR,$@)

$(BUILD_DIR):
	$(call MKDIR,$@)

SRC_INC_DIRS = $(sort $(dir $(wildcard $(SRCDIR)/$(TARGET)/*))) $(sort $(dir $(wildcard $(SRCDIR)/common/*)))

# debug:
#$(info $$SOURCES = ${SOURCES})
#$(info $$OBJECTS = ${OBJECTS})
#$(info $$SRC_INC_DIRS = ${SRC_INC_DIRS})

vpath %.c $(SRC_INC_DIRS) $(SRCDIR)

# C compilation hasn't been tested yet.
$(OBJDIR)/%.o: %.c | $(OBJDIR)
	@$(call MKDIR,$(dir $@))
	$(CC) -t $(TARGET) -c --create-dep $(@:.o=.d) $(CFLAGS) -o $@ $<

vpath %.s $(SRC_INC_DIRS) $(SRCDIR)

$(OBJDIR)/%.o: %.s | $(OBJDIR)
	@$(call MKDIR,$(dir $@))
	$(CC) -t $(TARGET) -c --create-dep $(@:.o=.d) -l $(@:.o=.lst) --add-source $(ASFLAGS) -o $@ $<

$(PROGRAM): $(LD_CONFIG) $(OBJECTS) $(LIBS) | $(BUILD_DIR)
	$(CC) -t $(TARGET) $(LDFLAGS) -Ln $(BUILD_DIR)/$(@:.com=.lbl) -l $(BUILD_DIR)/$(@:.com=.lst) -o $(BUILD_DIR)/$@ $(patsubst %.cfg,-C %.cfg,$^)

test: $(PROGRAM)
	$(PREEMUCMD)
	$(EMUCMD) $(BUILD_DIR)\\$<
	$(POSTEMUCMD)

dist: $(PROGRAM)
	@echo "TODO! dist"

clean:
	$(call RMFILES,-r $(BUILD_DIR)/*)
	$(call RMFILES,-r $(OBJDIR)/*)
	$(call RMFILES,-r dist/*)
